{
  "uid" : "7021c45ecaaa41f1",
  "name" : "test_open_browser",
  "fullName" : "TestCases.test_login#test_open_browser",
  "historyId" : "34e3ff6d71c06be268d3b3f2c31106ae",
  "time" : {
    "start" : 1635257696382,
    "stop" : 1635257708418,
    "duration" : 12036
  },
  "status" : "broken",
  "statusMessage" : "selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element is not clickable at point (399, 729)\n  (Session info: chrome=94.0.4606.81)\nStacktrace:\nBacktrace:\n\tOrdinal0 [0x004DBDE3+2473443]\n\tOrdinal0 [0x00476661+2057825]\n\tOrdinal0 [0x00382438+1057848]\n\tOrdinal0 [0x003B27B9+1255353]\n\tOrdinal0 [0x003B0AE0+1247968]\n\tOrdinal0 [0x003AE8AD+1239213]\n\tOrdinal0 [0x003AD701+1234689]\n\tOrdinal0 [0x003A3567+1193319]\n\tOrdinal0 [0x003C56E3+1332963]\n\tOrdinal0 [0x003A3386+1192838]\n\tOrdinal0 [0x003C57CA+1333194]\n\tOrdinal0 [0x003D4ABF+1395391]\n\tOrdinal0 [0x003C55AB+1332651]\n\tOrdinal0 [0x003A2104+1188100]\n\tOrdinal0 [0x003A2F59+1191769]\n\tGetHandleVerifier [0x00662266+1549718]\n\tGetHandleVerifier [0x0070D4A7+2250711]\n\tGetHandleVerifier [0x0056718B+521403]\n\tGetHandleVerifier [0x00566229+517465]\n\tOrdinal0 [0x0047B79D+2078621]\n\tOrdinal0 [0x0047FB58+2095960]\n\tOrdinal0 [0x0047FC92+2096274]\n\tOrdinal0 [0x00489541+2135361]\n\tBaseThreadInitThunk [0x7760FA29+25]\n\tRtlGetAppContainerNamedObjectPath [0x77CC7A9E+286]\n\tRtlGetAppContainerNamedObjectPath [0x77CC7A6E+238]",
  "statusTrace" : "def test_open_browser():\n                driver = webdriver.Chrome(executable_path=\"C:\\\\Hanamanta_Data\\\\Selenium\\\\Drivers\\\\chromedriver.exe\")\n                driver.maximize_window()\n                driver.get(\"https://www.topuniversities.com/\")\n                print(\"Title of the Page : \",driver.title)\n                wait = WebDriverWait(driver, 10)\n                    # time.sleep(5)\n                wait.until(EC.visibility_of_element_located((By.CSS_SELECTOR, '.agree-button')))\n>               driver.find_element_by_css_selector(\".agree-button\").click()\n\nTestCases\\test_login.py:17: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\..\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:80: in click\n    self._execute(Command.CLICK_ELEMENT)\n..\\..\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:693: in _execute\n    return self._parent.execute(command, params)\n..\\..\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:418: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001F08842B880>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\n\\\\tRtlGetAppContainerNamedObjectPath [0x77CC7A9E+286]\\\\n\\\\tRtlGetAppContainerNamedObjectPath [0x77CC7A6E+238]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, str):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response['value']\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None  # type: ignore[assignment]\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        st_value = value.get('stackTrace') or value.get('stacktrace')\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split('\\n')\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = self._value_or_default(frame, 'lineNumber', '')\n                        file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                        if line:\n                            file = \"%s:%s\" % (file, line)\n                        meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                        if 'className' in frame:\n                            meth = \"%s.%s\" % (frame['className'], meth)\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element is not clickable at point (399, 729)\nE         (Session info: chrome=94.0.4606.81)\nE       Stacktrace:\nE       Backtrace:\nE       \tOrdinal0 [0x004DBDE3+2473443]\nE       \tOrdinal0 [0x00476661+2057825]\nE       \tOrdinal0 [0x00382438+1057848]\nE       \tOrdinal0 [0x003B27B9+1255353]\nE       \tOrdinal0 [0x003B0AE0+1247968]\nE       \tOrdinal0 [0x003AE8AD+1239213]\nE       \tOrdinal0 [0x003AD701+1234689]\nE       \tOrdinal0 [0x003A3567+1193319]\nE       \tOrdinal0 [0x003C56E3+1332963]\nE       \tOrdinal0 [0x003A3386+1192838]\nE       \tOrdinal0 [0x003C57CA+1333194]\nE       \tOrdinal0 [0x003D4ABF+1395391]\nE       \tOrdinal0 [0x003C55AB+1332651]\nE       \tOrdinal0 [0x003A2104+1188100]\nE       \tOrdinal0 [0x003A2F59+1191769]\nE       \tGetHandleVerifier [0x00662266+1549718]\nE       \tGetHandleVerifier [0x0070D4A7+2250711]\nE       \tGetHandleVerifier [0x0056718B+521403]\nE       \tGetHandleVerifier [0x00566229+517465]\nE       \tOrdinal0 [0x0047B79D+2078621]\nE       \tOrdinal0 [0x0047FB58+2095960]\nE       \tOrdinal0 [0x0047FC92+2096274]\nE       \tOrdinal0 [0x00489541+2135361]\nE       \tBaseThreadInitThunk [0x7760FA29+25]\nE       \tRtlGetAppContainerNamedObjectPath [0x77CC7A9E+286]\nE       \tRtlGetAppContainerNamedObjectPath [0x77CC7A6E+238]\n\n..\\..\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:243: ElementClickInterceptedException",
  "flaky" : false,
  "newFailed" : false,
  "beforeStages" : [ ],
  "testStage" : {
    "status" : "broken",
    "statusMessage" : "selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element is not clickable at point (399, 729)\n  (Session info: chrome=94.0.4606.81)\nStacktrace:\nBacktrace:\n\tOrdinal0 [0x004DBDE3+2473443]\n\tOrdinal0 [0x00476661+2057825]\n\tOrdinal0 [0x00382438+1057848]\n\tOrdinal0 [0x003B27B9+1255353]\n\tOrdinal0 [0x003B0AE0+1247968]\n\tOrdinal0 [0x003AE8AD+1239213]\n\tOrdinal0 [0x003AD701+1234689]\n\tOrdinal0 [0x003A3567+1193319]\n\tOrdinal0 [0x003C56E3+1332963]\n\tOrdinal0 [0x003A3386+1192838]\n\tOrdinal0 [0x003C57CA+1333194]\n\tOrdinal0 [0x003D4ABF+1395391]\n\tOrdinal0 [0x003C55AB+1332651]\n\tOrdinal0 [0x003A2104+1188100]\n\tOrdinal0 [0x003A2F59+1191769]\n\tGetHandleVerifier [0x00662266+1549718]\n\tGetHandleVerifier [0x0070D4A7+2250711]\n\tGetHandleVerifier [0x0056718B+521403]\n\tGetHandleVerifier [0x00566229+517465]\n\tOrdinal0 [0x0047B79D+2078621]\n\tOrdinal0 [0x0047FB58+2095960]\n\tOrdinal0 [0x0047FC92+2096274]\n\tOrdinal0 [0x00489541+2135361]\n\tBaseThreadInitThunk [0x7760FA29+25]\n\tRtlGetAppContainerNamedObjectPath [0x77CC7A9E+286]\n\tRtlGetAppContainerNamedObjectPath [0x77CC7A6E+238]",
    "statusTrace" : "def test_open_browser():\n                driver = webdriver.Chrome(executable_path=\"C:\\\\Hanamanta_Data\\\\Selenium\\\\Drivers\\\\chromedriver.exe\")\n                driver.maximize_window()\n                driver.get(\"https://www.topuniversities.com/\")\n                print(\"Title of the Page : \",driver.title)\n                wait = WebDriverWait(driver, 10)\n                    # time.sleep(5)\n                wait.until(EC.visibility_of_element_located((By.CSS_SELECTOR, '.agree-button')))\n>               driver.find_element_by_css_selector(\".agree-button\").click()\n\nTestCases\\test_login.py:17: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\..\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:80: in click\n    self._execute(Command.CLICK_ELEMENT)\n..\\..\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:693: in _execute\n    return self._parent.execute(command, params)\n..\\..\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:418: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001F08842B880>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element click intercepted\",\"message\":\"element click intercepted: Element ...\\n\\\\tRtlGetAppContainerNamedObjectPath [0x77CC7A9E+286]\\\\n\\\\tRtlGetAppContainerNamedObjectPath [0x77CC7A6E+238]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"\n        Checks that a JSON response from the WebDriver does not have an error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get('status', None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get('value', None)\n            if value_json and isinstance(value_json, str):\n                import json\n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value['value']\n                    status = value.get('error', None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get('message')\n                    else:\n                        message = value.get('message', None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif status in ErrorCode.INVALID_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR \\\n                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response['value']\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and 'message' in value:\n            message = value['message']\n    \n        screen = None  # type: ignore[assignment]\n        if 'screen' in value:\n            screen = value['screen']\n    \n        stacktrace = None\n        st_value = value.get('stackTrace') or value.get('stacktrace')\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split('\\n')\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = self._value_or_default(frame, 'lineNumber', '')\n                        file = self._value_or_default(frame, 'fileName', '<anonymous>')\n                        if line:\n                            file = \"%s:%s\" % (file, line)\n                        meth = self._value_or_default(frame, 'methodName', '<anonymous>')\n                        if 'className' in frame:\n                            meth = \"%s.%s\" % (frame['className'], meth)\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if 'data' in value:\n                alert_text = value['data'].get('text')\n            elif 'alert' in value:\n                alert_text = value['alert'].get('text')\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementClickInterceptedException: Message: element click intercepted: Element is not clickable at point (399, 729)\nE         (Session info: chrome=94.0.4606.81)\nE       Stacktrace:\nE       Backtrace:\nE       \tOrdinal0 [0x004DBDE3+2473443]\nE       \tOrdinal0 [0x00476661+2057825]\nE       \tOrdinal0 [0x00382438+1057848]\nE       \tOrdinal0 [0x003B27B9+1255353]\nE       \tOrdinal0 [0x003B0AE0+1247968]\nE       \tOrdinal0 [0x003AE8AD+1239213]\nE       \tOrdinal0 [0x003AD701+1234689]\nE       \tOrdinal0 [0x003A3567+1193319]\nE       \tOrdinal0 [0x003C56E3+1332963]\nE       \tOrdinal0 [0x003A3386+1192838]\nE       \tOrdinal0 [0x003C57CA+1333194]\nE       \tOrdinal0 [0x003D4ABF+1395391]\nE       \tOrdinal0 [0x003C55AB+1332651]\nE       \tOrdinal0 [0x003A2104+1188100]\nE       \tOrdinal0 [0x003A2F59+1191769]\nE       \tGetHandleVerifier [0x00662266+1549718]\nE       \tGetHandleVerifier [0x0070D4A7+2250711]\nE       \tGetHandleVerifier [0x0056718B+521403]\nE       \tGetHandleVerifier [0x00566229+517465]\nE       \tOrdinal0 [0x0047B79D+2078621]\nE       \tOrdinal0 [0x0047FB58+2095960]\nE       \tOrdinal0 [0x0047FC92+2096274]\nE       \tOrdinal0 [0x00489541+2135361]\nE       \tBaseThreadInitThunk [0x7760FA29+25]\nE       \tRtlGetAppContainerNamedObjectPath [0x77CC7A9E+286]\nE       \tRtlGetAppContainerNamedObjectPath [0x77CC7A6E+238]\n\n..\\..\\AppData\\Local\\Programs\\Python\\Python39\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:243: ElementClickInterceptedException",
    "steps" : [ ],
    "attachments" : [ {
      "uid" : "cb9e8f22d3d1e324",
      "name" : "stdout",
      "source" : "cb9e8f22d3d1e324.txt",
      "type" : "text/plain",
      "size" : 114
    } ],
    "parameters" : [ ],
    "attachmentsCount" : 1,
    "shouldDisplayMessage" : true,
    "hasContent" : true,
    "stepsCount" : 0
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "parentSuite",
    "value" : "TestCases"
  }, {
    "name" : "suite",
    "value" : "test_login"
  }, {
    "name" : "host",
    "value" : "QSINBNB118"
  }, {
    "name" : "thread",
    "value" : "10744-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "TestCases.test_login"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : false,
  "retry" : false,
  "extra" : {
    "severity" : "normal",
    "retries" : [ ],
    "categories" : [ {
      "name" : "Test defects",
      "matchedStatuses" : [ ],
      "flaky" : false
    } ],
    "tags" : [ ]
  },
  "source" : "7021c45ecaaa41f1.json",
  "parameterValues" : [ ]
}